# Generated by Django 5.1.1 on 2025-03-03 01:07

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Universiti',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('slug', models.SlugField(unique=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('codename', models.CharField(max_length=100, verbose_name='codename')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='content type')),
            ],
            options={
                'verbose_name': 'permission',
                'verbose_name_plural': 'permissions',
                'ordering': ['content_type__app_label', 'content_type__model', 'codename'],
                'unique_together': {('content_type', 'codename')},
            },
            managers=[
                ('objects', django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='name')),
                ('permissions', models.ManyToManyField(blank=True, to='auth.permission', verbose_name='permissions')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
            },
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(help_text='Required. 150 characters or fewer. Letters and reqiured @', max_length=254, unique=True, verbose_name='email address')),
                ('hobby', models.CharField(blank=True, max_length=150, verbose_name='hobby')),
                ('birth', models.DateField(blank=True, null=True, verbose_name='birth')),
                ('address', models.CharField(blank=True, max_length=200, verbose_name='address')),
                ('country', models.CharField(blank=True, max_length=150, verbose_name='country')),
                ('phone', models.IntegerField(blank=True, default=0, verbose_name='phone')),
                ('gender', models.CharField(blank=True, choices=[('male', 'male'), ('female', 'female')], max_length=8, verbose_name='gender')),
                ('education', models.CharField(blank=True, choices=[('Basic', 'Basic'), ('Secondary', 'Secondary'), ('Higher', 'Higher'), ('Diploma', 'Diploma'), ("Bachelor's", 'Bachelor'), ('Master', 'Master'), ('Doctorate', 'Doctorate')], max_length=10, verbose_name='education')),
                ('tiktok', models.CharField(blank=True, max_length=200, verbose_name='tiktok')),
                ('youtube', models.CharField(blank=True, max_length=200, verbose_name='youtube')),
                ('facebook', models.CharField(blank=True, max_length=200, verbose_name='facebook')),
                ('instagram', models.CharField(blank=True, max_length=200, verbose_name='instagram')),
                ('linkedin', models.CharField(blank=True, max_length=200, verbose_name='linkedin')),
                ('twitter', models.CharField(blank=True, max_length=200, verbose_name='twitter')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=django.contrib.auth.models.filepath)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_member', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin member.', verbose_name='member status')),
                ('is_subscription', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin subscription.', verbose_name='subscription status')),
                ('is_instructor', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin instructor.', verbose_name='instructor status')),
                ('is_partner', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin partner.', verbose_name='partner status')),
                ('is_audit', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin audit.', verbose_name='audit status')),
                ('is_learner', models.BooleanField(default=True, help_text='Designates whether the user can log into this admin learner.', verbose_name='learner status')),
                ('is_note', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin note.', verbose_name='note status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('university', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.universiti', verbose_name='university')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
