from django import get_version
from django.utils.module_loading import import_string
from django.views.decorators.http import require_POST

from .permissions import check_upload_permission

if get_version() >= "4.0":
    from django.utils.translation import gettext_lazy as _
else:
    from django.utils.translation import ugettext_lazy as _

from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.http import JsonResponse
from PIL import Image

from .forms import UploadFileForm
from django.utils.text import get_valid_filename
from PIL import Image
import os
from django.core.files.storage import default_storage
class NoImageException(Exception):
    pass


def get_storage_class():
    storage_setting = getattr(settings, "CKEDITOR_5_FILE_STORAGE", None)
    default_storage_setting = getattr(settings, "DEFAULT_FILE_STORAGE", None)
    storages_setting = getattr(settings, "STORAGES", {})
    default_storage_name = storages_setting.get("default", {}).get("BACKEND")

    if storage_setting:
        return import_string(storage_setting)
    elif default_storage_setting:
        try:
            return import_string(default_storage_setting)
        except ImportError:
            error_msg = f"Invalid default storage class: {default_storage_setting}"
            raise ImproperlyConfigured(error_msg)
    elif default_storage_name:
        try:
            return import_string(default_storage_name)
        except ImportError:
            error_msg = f"Invalid default storage class: {default_storage_name}"
            raise ImproperlyConfigured(error_msg)
    else:
        error_msg = (
            "Either CKEDITOR_5_FILE_STORAGE, DEFAULT_FILE_STORAGE, "
            "or STORAGES['default'] setting is required."
        )
        raise ImproperlyConfigured(error_msg)


storage = get_storage_class()


def image_verify(f):
    try:
        Image.open(f).verify()
    except OSError:
        raise NoImageException


def handle_uploaded_file(f):
    fs = storage()
    filename = fs.save(f.name, f)
    return fs.url(filename)


@require_POST
@check_upload_permission
def upload_file(request):
    form = UploadFileForm(request.POST, request.FILES)
    allow_all_file_types = getattr(settings, "CKEDITOR_5_ALLOW_ALL_FILE_TYPES", False)

    if not allow_all_file_types:
        try:
            image_verify(request.FILES["upload"])
        except NoImageException as ex:
            return JsonResponse({"error": {"message": f"{ex}"}}, status=400)

    if form.is_valid():
        uploaded_file = request.FILES["upload"]
        file_name = get_valid_filename(uploaded_file.name)
        file_ext = os.path.splitext(file_name)[1].lower()

        # Convert to WebP if file is an image
        if file_ext in [".jpg", ".jpeg", ".png"]:
            try:
                # Open the image using PIL
                image = Image.open(uploaded_file)

                # Resize the image to 50% of its original size
                width, height = image.size
                new_width = int(width * 0.5)
                new_height = int(height * 0.5)
                image = image.resize((new_width, new_height))

                # Convert the file name to WebP format
                file_name = os.path.splitext(file_name)[0] + ".webp"  # Change extension to .webp
                file_path = os.path.join("uploads/", file_name)  # Define your upload path
                full_path = os.path.join(settings.MEDIA_ROOT, file_path)

                # Save the resized image as WebP
                image.save(full_path, "webp", quality=80)  # Adjust quality as needed

                # Return the WebP file URL
                url = default_storage.url(file_path)
                return JsonResponse({"url": url})

            except Exception as e:
                return JsonResponse({"error": {"message": f"Failed to convert or resize image: {e}"}}, status=400)

        # Handle other file types without conversion
        url = handle_uploaded_file(uploaded_file)
        return JsonResponse({"url": url})

    if form.errors.get("upload"):
        return JsonResponse(
            {"error": {"message": form.errors["upload"][0]}},
            status=400,
        )

    return JsonResponse({"error": {"message": _("Invalid form data")}}, status=400)

